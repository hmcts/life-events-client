/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.hmcts.lifeevents.client.api;

import uk.gov.hmcts.lifeevents.client.model.GeneralError;
import java.time.LocalDate;
import uk.gov.hmcts.lifeevents.client.model.V1Death;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-02T13:36:51.963195Z[Europe/London]")

@Validated
@Api(value = "Death", description = "the Death API")
public interface DeathApi {

    /**
     * GET /v1/registration/death/{id} : Look up a specific death record
     * Look up individual death records using the &#x60;systemNumber&#x60; printed in the bottom-left of the death certificate. (UNSTABLE: This endpoint is subject to change.)
     *
     * @param id The system number printed in the bottom-left of the death certificate (required)
     * @return successful operation (status code 200)
     *         or Resource not found (status code 404)
     *         or Bad request (status code 200)
     */
    @ApiOperation(value = "Look up a specific death record", nickname = "readV1Death", notes = "Look up individual death records using the `systemNumber` printed in the bottom-left of the death certificate. (UNSTABLE: This endpoint is subject to change.)", response = V1Death.class, authorizations = {
        @Authorization(value = "bearerToken", scopes = {
            
            })
    }, tags={ "death","v1","unstable", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = V1Death.class),
        @ApiResponse(code = 404, message = "Resource not found", response = GeneralError.class),
        @ApiResponse(code = 200, message = "Bad request", response = GeneralError.class) })
    @RequestMapping(value = "/v1/registration/death/{id}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<V1Death> readV1Death(@ApiParam(value = "The system number printed in the bottom-left of the death certificate",required=true) @PathVariable("id") Integer id);


    /**
     * GET /v1/registration/death : Search for death records
     * Search for death records by supplying the surname, at least the first forename and either the date of birth or the date of death of the deceased. (UNSTABLE: This endpoint is subject to change.)
     *
     * @param forenames The deceased&#39;s forenames. The first name must be provided but middlenames are optional. (required)
     * @param surname The deceased&#39;s surname. (required)
     * @param date The deceased&#39;s date of birth or death in international format. (required)
     * @return successful operation (status code 200)
     *         or Bad request (status code 200)
     */
    @ApiOperation(value = "Search for death records", nickname = "searchV1Death", notes = "Search for death records by supplying the surname, at least the first forename and either the date of birth or the date of death of the deceased. (UNSTABLE: This endpoint is subject to change.)", response = V1Death.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerToken", scopes = {
            
            })
    }, tags={ "death","v1","unstable", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = V1Death.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Bad request", response = GeneralError.class) })
    @RequestMapping(value = "/v1/registration/death",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<V1Death>> searchV1Death(@NotNull @ApiParam(value = "The deceased's forenames. The first name must be provided but middlenames are optional.", required = true) @Valid @RequestParam(value = "forenames", required = true) String forenames,@NotNull @ApiParam(value = "The deceased's surname.", required = true) @Valid @RequestParam(value = "surname", required = true) String surname,@NotNull @ApiParam(value = "The deceased's date of birth or death in international format.", required = true) @Valid @RequestParam(value = "date", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate date);

}
